{"version":3,"file":"index.js","names":["_kleur","_interopRequireDefault","require","_patchCodegenAndroidPackage","_fsExtra","_path","_del","_removeCodegenAppLevelCode","_spawn","e","__esModule","default","build","root","report","packageJsonPath","path","resolve","packageJson","fs","readJson","codegenIosPath","codegenConfig","outputDir","ios","info","kleur","blue","relative","del","codegenAndroidPath","android","codegenType","type","undefined","Error","codegenCLISupportsSource","getCodegenCLISourceSupport","spawn","patchCodegenAndroidPackage","removeCodegenAppLevelCode","success","stdout","error","toString","message","includes","cause"],"sources":["../../../src/targets/codegen/index.ts"],"sourcesContent":["import kleur from 'kleur';\nimport type { Input } from '../../types';\nimport { patchCodegenAndroidPackage } from './patches/patchCodegenAndroidPackage';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport del from 'del';\nimport {\n  getCodegenCLISourceSupport,\n  removeCodegenAppLevelCode,\n} from './patches/removeCodegenAppLevelCode';\nimport { spawn } from '../../utils/spawn';\n\ntype Options = Omit<Input, 'output'>;\n\nexport default async function build({ root, report }: Options) {\n  const packageJsonPath = path.resolve(root, 'package.json');\n  const packageJson = await fs.readJson(packageJsonPath);\n\n  const codegenIosPath = packageJson.codegenConfig?.outputDir?.ios;\n  if (codegenIosPath != null) {\n    report.info(\n      `Cleaning up previous iOS codegen native code at ${kleur.blue(\n        path.relative(root, codegenIosPath)\n      )}`\n    );\n    await del([codegenIosPath]);\n  }\n\n  const codegenAndroidPath = packageJson.codegenConfig?.outputDir?.android;\n  if (codegenAndroidPath != null) {\n    report.info(\n      `Cleaning up previous Android codegen native code at ${kleur.blue(\n        path.relative(root, codegenAndroidPath)\n      )}`\n    );\n    await del([codegenAndroidPath]);\n  }\n\n  const codegenType = packageJson.codegenConfig?.type;\n\n  if (codegenType === undefined) {\n    throw new Error(\n      \"Couldn't find the 'type' value in 'codegenConfig'. Please check your package.json's 'codegenConfig' property and make sure 'type' is defined. https://reactnative.dev/docs/the-new-architecture/using-codegen#configuring-codegen\"\n    );\n  }\n\n  try {\n    const codegenCLISupportsSource = await getCodegenCLISourceSupport();\n\n    await spawn('npx', [\n      '@react-native-community/cli',\n      'codegen',\n      ...(codegenCLISupportsSource ? ['--source', 'library'] : []),\n    ]);\n\n    if (codegenType === 'modules' || codegenType === 'all') {\n      await patchCodegenAndroidPackage(root, packageJson, report);\n    }\n\n    if (!codegenCLISupportsSource) {\n      await removeCodegenAppLevelCode(root, packageJson);\n    }\n\n    report.success('Generated native code with codegen');\n  } catch (e: unknown) {\n    if (e != null && typeof e === 'object') {\n      if ('stdout' in e && e.stdout != null) {\n        report.error(\n          `Errors found while running codegen:\\n\\n${e.stdout.toString()}`\n        );\n      } else if ('message' in e && typeof e.message === 'string') {\n        if (\n          e.message.includes(\n            \"Error: Cannot find module '@react-native-community/cli/package.json'\"\n          )\n        ) {\n          report.error(\n            \"You don't have `@react-native-community/cli` in your root package's dev dependencies. Please install it and make sure it uses the same version as your application.\"\n          );\n        }\n      }\n    }\n\n    throw new Error('Failed to run codegen.', { cause: e });\n  }\n}\n"],"mappings":"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","ignoreList":[]}
{"version":3,"file":"patchCodegenAndroidPackage.test.js","names":["_vitest","require","_fsExtra","_interopRequireDefault","_nodePath","_patchCodegenAndroidPackage","_mockFs","e","__esModule","default","mockPackageJson","codegenConfig","outputDir","android","javaPackageName","mockReport","info","console","log","warn","error","success","mockJavaModuleSpec","mockJavaViewSpec","mockProjectPath","path","resolve","__dirname","mockCodegenModuleSpecsPath","mockCodegenViewSpecsPath","describe","beforeEach","mockfs","JSON","stringify","afterEach","restore","test","patchCodegenAndroidPackage","expectedDir","expect","fs","pathExists","toBe","expectedFile","fileContent","readFile","toContain","mockPackageJsonWithTypeAll","type","join","toBeTruthy"],"sources":["../../../../src/targets/codegen/patches/patchCodegenAndroidPackage.test.ts"],"sourcesContent":["import { expect, test, describe, beforeEach, afterEach } from 'vitest';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport { patchCodegenAndroidPackage } from './patchCodegenAndroidPackage';\nimport mockfs from 'mock-fs';\nimport type { Report } from '../../../types';\n\nconst mockPackageJson = {\n  codegenConfig: {\n    outputDir: {\n      android: 'android/generated',\n    },\n    android: {\n      javaPackageName: 'com.bobtest',\n    },\n  },\n};\n\nconst mockReport: Report = {\n  info: console.log,\n  warn: console.log,\n  error: console.error,\n  success: console.log,\n};\n\nconst mockJavaModuleSpec = `\n/**\n * Some comment\n */\n\npackage com.facebook.fbreact.specs;\n\nimport com.example.exampleimport;\n\nclass SomeClass {\n  public void someMethod() {\n    // some code\n  }\n}`;\n\nconst mockJavaViewSpec = `\n/**\n  * Some comment\n  */\n\npackage com.facebook.react.viewmanagers;\n\npublic interface SomeInterface<T extends View> {\n  void setColor(T view, @Nullable String value);\n}\n`;\n\nconst mockProjectPath = path.resolve(__dirname, 'mockProject');\nconst mockCodegenModuleSpecsPath = path.resolve(\n  mockProjectPath,\n  'android/generated/java/com/facebook/fbreact/specs'\n);\nconst mockCodegenViewSpecsPath = path.resolve(\n  mockProjectPath,\n  'android/generated/java/com/facebook/react/viewmanagers'\n);\n\ndescribe('patchCodegenAndroidPackage', () => {\n  beforeEach(() => {\n    mockfs({\n      [mockProjectPath]: {\n        'package.json': JSON.stringify(mockPackageJson),\n      },\n      [mockCodegenModuleSpecsPath]: {\n        'NativeBobtestSpec.java': mockJavaModuleSpec,\n      },\n    });\n  });\n\n  afterEach(() => {\n    mockfs.restore();\n  });\n\n  test('moves the files to correct dir', async () => {\n    await patchCodegenAndroidPackage(\n      mockProjectPath,\n      mockPackageJson,\n      mockReport\n    );\n\n    const expectedDir = path.resolve(\n      mockProjectPath,\n      'android/generated/java/com/bobtest'\n    );\n\n    expect(await fs.pathExists(expectedDir)).toBe(true);\n  });\n\n  test('replaces the package name in the files', async () => {\n    await patchCodegenAndroidPackage(\n      mockProjectPath,\n      mockPackageJson,\n      mockReport\n    );\n\n    const expectedDir = path.resolve(\n      mockProjectPath,\n      'android/generated/java/com/bobtest'\n    );\n\n    const expectedFile = path.resolve(expectedDir, 'NativeBobtestSpec.java');\n\n    const fileContent = await fs.readFile(expectedFile, 'utf8');\n\n    expect(fileContent).toContain('package com.bobtest;');\n  });\n\n  test('removes the old package dir', async () => {\n    await patchCodegenAndroidPackage(\n      mockProjectPath,\n      mockPackageJson,\n      mockReport\n    );\n\n    expect(await fs.pathExists(mockCodegenModuleSpecsPath)).toBe(false);\n  });\n\n  test(\"doesn't delete the view manager specs\", async () => {\n    const mockPackageJsonWithTypeAll = {\n      ...mockPackageJson,\n      codegenConfig: {\n        ...mockPackageJson.codegenConfig,\n        type: 'all',\n      },\n    };\n\n    mockfs({\n      [mockProjectPath]: {\n        'package.json': JSON.stringify(mockPackageJsonWithTypeAll),\n      },\n      [mockCodegenModuleSpecsPath]: {\n        'NativeBobtestSpec.java': mockJavaModuleSpec,\n      },\n      [mockCodegenViewSpecsPath]: {\n        'BobtestViewManagerInterface.java': mockJavaViewSpec,\n      },\n    });\n\n    await patchCodegenAndroidPackage(\n      mockProjectPath,\n      mockPackageJsonWithTypeAll,\n      mockReport\n    );\n\n    expect(\n      await fs.pathExists(\n        path.join(mockCodegenViewSpecsPath, 'BobtestViewManagerInterface.java')\n      )\n    ).toBeTruthy();\n  });\n});\n"],"mappings":"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","ignoreList":[]}